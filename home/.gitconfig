# -*- sh -*-

# Documented in git-config(1).

[user]
    name = Michael Stillwell
    # Modify locally via git config --local user.email mstillwell@workplace.com or
    # GIT_AUTHOR_EMAIL environment variable
    email = mjs@beebo.org

[core]
    excludesfile = ~/.gitignore

[diff]
    mnemonicprefix = true
    # https://github.com/blog/2288-git-2-11-has-been-released
    indentHeuristic = true
    compactionHeuristic = true
    relative = true # operate on subdirectories of current directory, not whole repo

[fetch]
    prune = true

[alias]
    # Debug by setting env var GIT_TRACE=1.

    # https://wikileaks.org/ciav7p1/cms/page_1179773.html
    aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /' | sort
    # Show the object type
    type = cat-file -t
    # e.g. git cat master:path/to/file.txt
    cat = cat-file -p
    stat = status -sb
    # Show ignored files
    ls-ignored = status --ignored

    # Reset to HEAD
    reset-hard = reset --hard HEAD
    # Delete untracked files and directories (doesn't work if no commit...)
    reset-harder = !git reset --hard HEAD && git clean -df
    # Delete ignored files (doesn't work if no initial commit...)
    reset-hardest = !git reset --hard HEAD && git clean -xdf

    # Sets "master" branch to track "origin/master"
    branch-set-master-track-origin = branch master --set-upstream-to origin/master
    # "Verbose" listing of local branches (shows what remote they track) (-avv = all, -rvv = remote)
    branch-local-verbose = branch -lvv

    # Ignore package-lock.json, yarn.lock when displaying diffs
    diff-no-lock = !git diff $1 -- . ':(exclude,top)**/package-lock.json' ':(exclude,top)package-lock.json' ':(exclude,top)**/yarn.lock' ':(exclude,top)yarn.lock'

    # Cloning and naming things notes (no good alias...):
    #
    # git clone --origin upstream # changes name to "upstream", but adds tracking info
    # git remote rename <old> <new>
    # git branch --unset-upstream # removes tracking info (but need to change into repo dir, can use cd $(ls -t | head -1)...)
    # git branch -u origin/master # current branch tracks origin/master (but need to fetch first)
    #
    # Example of handling arguments:
    #clone-upstream = "!git clone --origin upstream \"$1\" && cd $(ls -t | head -1) && git branch --unset-upstream #"

    # usage: git date-created foo/bar/baz.txt
    # May not be completely correct: http://stackoverflow.com/a/25633731/11543
    date-created = -c pager.log=false log --pretty=%aI --follow --diff-filter=A
    # usage: git date-modified foo/bar/baz.txt
    date-modified = -c pager.log=false log --pretty=%aI -n 1

    spush = stash -u
    spop = stash pop
    sapply = stash apply

    # Given a ref, returns merge commits that involved that ref
    show-merged-by = "!f() { git log --ancestry-path --merges $1..$(git rev-parse --abbrev-ref HEAD); }; f"

    # Like "git branch", but sorted by last modified date
    # http://stackoverflow.com/a/10693888/11543
    branch-by-date = for-each-ref --sort=-committerdate refs/heads/ --format='%(refname:short) (%(committerdate:short))'

    # Skip/ignore local changes to a file (see also --assume-unchanged)
    # https://codeclimber.net.nz/archive/2016/12/19/ignoring-files-on-git-but-just-for-a-while-with-assume-unchanged/#comment-3264877345
    skip = update-index --skip-worktree
    unskip = update-index --no-skip-worktree
    ls-skipped = "!git ls-files -v | grep ^S | cut -c 3-"

    # Like "git status", but takes a reference
    diff-status = !git --no-pager diff --name-status

    # For gerrit (if get an error on first push, set remote via "git branch -u myremote")
    push-gerrit = !git push $(dirname $(git rev-parse --abbrev-ref '@{upstream}')) HEAD:refs/for/$(basename $(git rev-parse --abbrev-ref '@{upstream}'))

    # Add staged changes to previous commit (useful for gerrit: stage
    # the change you want, then run this--no comment needed)
    commit-amend = commit --amend --no-edit

    # Show tracked files; useful for piping to entr
    tracked = ls-tree -r HEAD --name-only

    # Remove node_modules (dangerous!)
    clean-node-modules = "!find . -type d -name node_modules -prune -print -exec rm -rf {} +"

    checkout-main = "!git checkout main > /dev/null || git checkout master"

    # suggested replacement for "git pull", see https://stackoverflow.com/a/15316602/11543
    up = !git remote update -p && git merge --ff-only @{upstream}

[advice]
    pushNonFastForward = false
    statusHints = true

[push]
    default = simple

[merge]
    defaultToUpstream = true

[hooks]
    #preCommitRegexp = rawlog|console\\.log

[init]
    #templatedir = ~/.dotfiles/templates

[color]
    ui = auto

[filter "lfs"]
    clean = git lfs clean %f
    smudge = git lfs smudge %f
    required = true

[gitreview]
    # https://www.mediawiki.org/wiki/Gerrit/git-review
	remote = origin

[http]
	cookiefile = ~/.gitcookies

[include]
	path = ~/.gitconfig.local

[pager]
	branch = false

[pull]
    # Push and pull should be symmetric; see https://felipec.wordpress.com/2021/07/05/git-update/
    ff = only

# TODO: Conditionalise on directory (e.g. if split into personal and work repos)
# https://utf9k.net/blog/conditional-gitconfig/
