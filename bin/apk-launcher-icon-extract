#!/usr/bin/env bash

shopt -s nullglob

if [ -z "$1" ]; then

  echo "usage: $(basename "$0") apk"
  exit 1

fi

function require() { hash "$@" || exit 127; }

require unzip
require apktool
require xmllint

function match_vector() {

  GLOB="$1"
  GLOB="${GLOB/@/res\/}"
  GLOB="${GLOB/mipmap/mipmap*}"
  GLOB="${GLOB}*.xml"
  
  MATCHES=($2/$GLOB)

  echo "${MATCHES[0]}"
  return

}

function match_raster() {

  densities=(xxxhdpi xxhdpi xhdpi hdpi mdpi)
  
  if [[ $1 =~ ^@drawable ]]; then
  
    for d in "${densities[@]}"; do
  
      GLOB="$1"
      GLOB="${GLOB/@/res\/}"
      GLOB="${GLOB/drawable/drawable*}"
      GLOB="${GLOB}.png"
	  
      MATCHES=($2/$GLOB)
	
      if [ ${#MATCHES[@]} -gt 0 ]; then
        echo "${MATCHES[0]}"
        return
      fi
	
    done
  
  elif [[ $1 =~ ^@mipmap ]]; then
  
    for d in "${densities[@]}"; do
  
      GLOB="$1"
      GLOB="${GLOB/@/res\/}"
      GLOB="${GLOB/mipmap/mipmap-${d}*}"
      GLOB="${GLOB}*.png"
  
      MATCHES=($2/$GLOB)
	
	  if [ ${#MATCHES[@]} -gt 0 ]; then
        echo "${MATCHES[0]}"
	    return
	  fi
	
    done
  
  fi
  
}

function extract_resource() {

  DIR="$1"
  REFERENCE="$2"
  PREFIX="$3"

  VECTOR_ICON=$(match_vector "$REFERENCE" "$DIR")
  RASTER_ICON=$(match_raster "$REFERENCE" "$DIR")

  if [ -n "$VECTOR_ICON" ]; then

    FILENAME="$PREFIX.xml"
    xmllint --format "$VECTOR_ICON" > "$FILENAME"
    echo "Saved $FILENAME ($REFERENCE resolved to $VECTOR_ICON)"

  elif [ -n "$RASTER_ICON" ]; then

    FILENAME="$PREFIX.png"
    cp "$RASTER_ICON" "$FILENAME"
    echo "Saved $FILENAME ($REFERENCE resolved to $RASTER_ICON)"

  fi

}

if [[ $1 == *.zip ]]; then

  TMPDIR=$(mktemp -d)
  trap 'rm -rf -- "$TMPDIR"' EXIT

  unzip -q "$1" -d "$TMPDIR"
  BASEAPK=$(directory-base-split "$TMPDIR")

  if [ ! -f "${BASEAPK[0]}" ]; then
    echo "error: *_base_split.apk not found in zip, aborting"
    exit 1
  fi

else

  BASEAPK="$1"

fi

TMPDIR=$(mktemp -d)
apktool d "$BASEAPK" -f -s -o "$TMPDIR" > /dev/null 2>&1

extract_resource \
  "$TMPDIR" \
  "$(xpath -n -q -e 'string(/manifest/application/@android:icon)' < "$TMPDIR"/AndroidManifest.xml)" \
  "$(basename "$1" .zip)-launcher-icon"

if [[ -n "$(xpath -n -q -e 'string(/manifest/application/@android:roundIcon)' < "$TMPDIR"/AndroidManifest.xml)" ]]; then

  extract_resource \
    "$TMPDIR" \
    "$(xpath -n -q -e 'string(/manifest/application/@android:roundIcon)' < "$TMPDIR"/AndroidManifest.xml)" \
    "$(basename "$1" .zip)-launcher-icon-round"

fi
