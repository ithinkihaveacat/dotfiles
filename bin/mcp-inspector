#!/usr/bin/env bash

require() { hash "$@" || exit 127; }

require npx
require jq

if [ -z "$1" ]; then
  echo "usage: $(basename "$0") <command|file> [args...]"
  exit 1
fi

# If the first argument is an executable, run it with the inspector.
if command -v "$1" >/dev/null 2>&1; then

  npx @modelcontextprotocol/inspector "$@"
  exit $?

fi

# Otherwise, treat the first argument as a JSON config file.
CONFIG_FILE="$1"
SERVER_NAME="$2"

if [ ! -f "$CONFIG_FILE" ]; then
  echo "Error: Command '$1' not found, and is not a file."
  exit 1
fi

if [ -z "$SERVER_NAME" ]; then

  # If no server name is given, list the available servers from the config file.
  echo "Available servers:"
  jq -r '.mcpServers | keys[]' "$CONFIG_FILE"

else

  # If a server name is provided, run the inspector with the server's config.

  # Check if the server key exists in the JSON file.
  if ! jq -e ".mcpServers.\"$SERVER_NAME\"" "$CONFIG_FILE" > /dev/null; then
    echo "Error: Server '$SERVER_NAME' not found in $CONFIG_FILE"
    exit 1
  fi

  # Extract the command and arguments from the JSON file.
  CMD=$(jq -r ".mcpServers.\"$SERVER_NAME\".command" "$CONFIG_FILE")
  readarray -t ARGS < <(jq -r ".mcpServers.\"$SERVER_NAME\".args[]" "$CONFIG_FILE")

  # Pass through any errors from jq.
  if [ "${PIPESTATUS[0]}" -ne 0 ]; then
      echo "Error: Could not parse command or args for server '$SERVER_NAME' in '$CONFIG_FILE'."
      exit 1
  fi

  npx @modelcontextprotocol/inspector "$CMD" "${ARGS[@]}"

fi
